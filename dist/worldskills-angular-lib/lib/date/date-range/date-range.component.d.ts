import { EventEmitter } from '@angular/core';
import { NgbDate, NgbCalendar, NgbDateParserFormatter } from '@ng-bootstrap/ng-bootstrap';
import { ControlValueAccessor } from '@angular/forms';
import { DateRange } from '../date-range';
import * as i0 from "@angular/core";
export declare class DateRangeComponent implements ControlValueAccessor {
    private calendar;
    formatter: NgbDateParserFormatter;
    disabled: boolean;
    get opacity(): number;
    hoveredDate: NgbDate | null;
    fromDate: NgbDate | null;
    toDate: NgbDate | null;
    value: DateRange;
    change: EventEmitter<DateRange>;
    constructor(calendar: NgbCalendar, formatter: NgbDateParserFormatter);
    onDateSelection(date: NgbDate): void;
    isHovered(date: NgbDate): boolean;
    isInside(date: NgbDate): boolean;
    isRange(date: NgbDate): boolean;
    validateInput(currentValue: NgbDate | null, input: string): NgbDate | null;
    onChange: (range: DateRange) => void;
    onTouched: () => void;
    writeValue(obj: DateRange): void;
    toNgbDate(date: Date): NgbDate;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDef<DateRangeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<DateRangeComponent, "ws-date-range", never, { "disabled": "disabled"; }, { "change": "change"; }, never, never>;
}
