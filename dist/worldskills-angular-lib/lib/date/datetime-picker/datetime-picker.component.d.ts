import { EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NgbDate, NgbPopover, NgbPopoverConfig, NgbTimeStruct } from '@ng-bootstrap/ng-bootstrap';
import { Datetime } from '../datetime';
import * as i0 from "@angular/core";
export declare class DatetimePickerComponent implements ControlValueAccessor {
    private config;
    disabled: boolean;
    get opacity(): number;
    inputDatetimeFormat: string;
    hourStep: number;
    minuteStep: number;
    secondStep: number;
    seconds: boolean;
    showTimePickerToggle: boolean;
    value: Datetime;
    model: NgbDate | null;
    popover: NgbPopover;
    change: EventEmitter<Datetime>;
    onChange: (value: Datetime) => void;
    onTouched: () => void;
    constructor(config: NgbPopoverConfig);
    writeValue(obj: Datetime): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    onInputChange($event: any): void;
    toggleDateTimeState(): void;
    onDateChange(date: NgbDate): void;
    onTimeChange(event: NgbTimeStruct): void;
    onAccept(): void;
    inputBlur($event: any): void;
    toNgbDate(date: Date): NgbDate;
    static ɵfac: i0.ɵɵFactoryDef<DatetimePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<DatetimePickerComponent, "ws-datetime-picker", never, { "disabled": "disabled"; "inputDatetimeFormat": "inputDatetimeFormat"; "hourStep": "hourStep"; "minuteStep": "minuteStep"; "secondStep": "secondStep"; "seconds": "seconds"; }, { "change": "change"; }, never, never>;
}
