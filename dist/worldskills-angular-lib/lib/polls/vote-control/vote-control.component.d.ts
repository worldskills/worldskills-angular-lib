import { OnInit, TemplateRef, EventEmitter } from '@angular/core';
import { Poll } from '../models/poll';
import { Result } from '../models/result';
import { Vote } from '../models/vote';
import { Subscription } from 'rxjs';
import { VoteEntry } from '../models/vote-entry';
import * as i0 from "@angular/core";
export declare class VoteControlComponent implements OnInit {
    showEditButton: boolean;
    showExtendButton: boolean;
    showResetButton: boolean;
    showDeleteButton: boolean;
    poll: Poll;
    results: Result[];
    voted: Vote;
    beforeOptionsTemplate: TemplateRef<any>;
    afterOptionsTemplate: TemplateRef<any>;
    beforeResultTemplate: TemplateRef<any>;
    afterResultTemplate: TemplateRef<any>;
    titleTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    questionTemplate: TemplateRef<any>;
    edit: EventEmitter<Poll>;
    extend: EventEmitter<Poll>;
    reset: EventEmitter<Poll>;
    delete: EventEmitter<Poll>;
    viewChange: EventEmitter<string>;
    voteSelected: EventEmitter<VoteEntry[]>;
    voteRemoved: EventEmitter<VoteEntry[]>;
    view: string;
    subscription: Subscription;
    state: string;
    selection: VoteEntry[];
    constructor();
    ngOnInit(): void;
    ngOnChanges(): void;
    init(): void;
    calculateState(): void;
    selected(model: VoteEntry[]): void;
    vote(): void;
    unvote(): void;
    changeView(view: string): void;
    viewResultsState(): boolean;
    parseDate(value: any): Date;
    hasVotesSelected(): boolean;
    editClick(poll: Poll): void;
    extendClick(poll: Poll): void;
    resetClick(poll: Poll): void;
    deleteClick(poll: Poll): void;
    showVoteButton(): boolean;
    showClearVoteButton(): boolean;
    static ɵfac: i0.ɵɵFactoryDef<VoteControlComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<VoteControlComponent, "ws-vote-control", never, { "showEditButton": "showEditButton"; "showExtendButton": "showExtendButton"; "showResetButton": "showResetButton"; "showDeleteButton": "showDeleteButton"; "poll": "poll"; "results": "results"; "voted": "voted"; "beforeOptionsTemplate": "beforeOptionsTemplate"; "afterOptionsTemplate": "afterOptionsTemplate"; "beforeResultTemplate": "beforeResultTemplate"; "afterResultTemplate": "afterResultTemplate"; "titleTemplate": "titleTemplate"; "footerTemplate": "footerTemplate"; "questionTemplate": "questionTemplate"; }, { "edit": "edit"; "extend": "extend"; "reset": "reset"; "delete": "delete"; "viewChange": "viewChange"; "voteSelected": "voteSelected"; "voteRemoved": "voteRemoved"; }, never, never>;
}
