"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityTreeService = void 0;
const core_1 = require("@angular/core");
const http_1 = require("@angular/common/http");
const rxjs_1 = require("rxjs");
const i0 = require("@angular/core");
const i1 = require("../worldskills-angular-lib.service");
const i2 = require("@angular/common/http");
class EntityTreeService {
    constructor(wsi, http) {
        this.wsi = wsi;
        this.http = http;
        this.subjects = [];
        this.subject = new rxjs_1.BehaviorSubject(null);
        this.wsi.serviceConfigSubject.subscribe(next => {
            this.endpoint = next.apiEndpoint + '/auth/ws_entities';
        });
    }
    static equals(a, b) {
        return (a.limit === b.limit &&
            a.offset === b.offset &&
            a.depth === b.depth &&
            a.member_of === b.member_of &&
            a.name === b.name &&
            a.role === b.role &&
            a.roleApp === b.roleApp &&
            a.sort === b.sort);
    }
    clearCache(params = null) {
        if (params === null) {
            this.subjects = [];
        }
        else {
            const cacheEntryIndex = this.subjects.findIndex(cE => EntityTreeService.equals(cE.params, params));
            if (cacheEntryIndex >= 0) {
                this.subjects.splice(cacheEntryIndex, 1);
            }
        }
    }
    getCachedSubject(params = {}, fetchOnCreate = true) {
        const cacheEntry = this.subjects.find(cE => EntityTreeService.equals(cE.params, params));
        if (cacheEntry) {
            return cacheEntry.subject;
        }
        else {
            const newCacheEntry = {
                params,
                subject: new rxjs_1.BehaviorSubject(null),
            };
            this.subjects.push(newCacheEntry);
            if (fetchOnCreate) {
                this.list(params);
            }
            return newCacheEntry.subject;
        }
    }
    list(params = {}) {
        let httpParams = new http_1.HttpParams();
        if (params.limit !== undefined) {
            httpParams = httpParams.set('limit', params.limit.toString());
        }
        if (params.offset !== undefined) {
            httpParams = httpParams.set('offset', params.offset.toString());
        }
        if (params.depth !== undefined) {
            httpParams = httpParams.set('depth', params.depth.toString());
        }
        if (params.member_of !== undefined) {
            httpParams = httpParams.set('member_of', params.member_of.toString());
        }
        if (params.name !== undefined) {
            httpParams = httpParams.set('name', params.name.toString());
        }
        if (params.role !== undefined) {
            httpParams = httpParams.set('role', params.role.toString());
        }
        if (params.roleApp !== undefined) {
            httpParams = httpParams.set('roleApp', params.roleApp.toString());
        }
        if (params.sort !== undefined) {
            httpParams = httpParams.set('sort', params.sort.toString());
        }
        const observable = this.http.get(this.endpoint, { params: httpParams });
        const cacheEntry = this.subjects.find(cE => EntityTreeService.equals(cE.params, params));
        if (cacheEntry) {
            observable.subscribe(value => cacheEntry.subject.next(value));
        }
        observable.subscribe(value => this.subject.next(value));
        return observable;
    }
}
exports.EntityTreeService = EntityTreeService;
EntityTreeService.ɵfac = function EntityTreeService_Factory(t) { return new (t || EntityTreeService)(i0.ɵɵinject(i1.WorldskillsAngularLibService), i0.ɵɵinject(i2.HttpClient)); };
EntityTreeService.ɵprov = i0.ɵɵdefineInjectable({ token: EntityTreeService, factory: EntityTreeService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(EntityTreeService, [{
        type: core_1.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.WorldskillsAngularLibService }, { type: i2.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,