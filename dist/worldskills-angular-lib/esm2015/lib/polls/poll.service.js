"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PollService = void 0;
const core_1 = require("@angular/core");
const i0 = require("@angular/core");
const i1 = require("../worldskills-angular-lib.service");
const i2 = require("@angular/common/http");
class PollService {
    constructor(wsi, http) {
        this.wsi = wsi;
        this.http = http;
        this.wsi.serviceConfigSubject.subscribe(next => {
            this.endpoint = next.apiEndpoint + '/votes';
        });
    }
    list(params) {
        return this.http.get(this.endpoint, { params });
    }
    select(params) {
        const url = `${this.endpoint}/select`;
        return this.http.get(url, { params });
    }
    get(id) {
        const url = `${this.endpoint}/${id}`;
        return this.http.get(url);
    }
    getResults(id) {
        const url = `${this.endpoint}/${id}/results`;
        return this.http.get(url);
    }
    hasVoted(id) {
        const url = `${this.endpoint}/${id}/has_voted`;
        return this.http.get(url);
    }
    create(model) {
        return this.http.post(this.endpoint, model);
    }
    update(id, model) {
        const url = `${this.endpoint}/${id}`;
        return this.http.put(url, model);
    }
    delete(id) {
        const url = `${this.endpoint}/${id}`;
        return this.http.delete(url);
    }
    undelete(id) {
        const url = `${this.endpoint}/${id}/undelete`;
        return this.http.put(url, {});
    }
    reset(id, start, expiry) {
        const model = { start, expiry };
        const url = `${this.endpoint}/${id}/reset`;
        return this.http.put(url, model);
    }
    extend(id, expiry) {
        const model = { expiry };
        const url = `${this.endpoint}/${id}/extend`;
        return this.http.put(url, model);
    }
    addVote(pollId, votes) {
        const model = { votes };
        const url = `${this.endpoint}/${pollId}/addVote`;
        return this.http.post(url, model);
    }
    unvote(pollId) {
        const url = `${this.endpoint}/${pollId}/removeVote`;
        return this.http.delete(url);
    }
}
exports.PollService = PollService;
PollService.ɵfac = function PollService_Factory(t) { return new (t || PollService)(i0.ɵɵinject(i1.WorldskillsAngularLibService), i0.ɵɵinject(i2.HttpClient)); };
PollService.ɵprov = i0.ɵɵdefineInjectable({ token: PollService, factory: PollService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(PollService, [{
        type: core_1.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.WorldskillsAngularLibService }, { type: i2.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9sbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvd29ybGRza2lsbHMtYW5ndWxhci1saWIvc3JjL2xpYi9wb2xscy9wb2xsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQTJDOzs7O0FBVzNDLE1BR2EsV0FBVztJQUd0QixZQUFzQixHQUFpQyxFQUFZLElBQWdCO1FBQTdELFFBQUcsR0FBSCxHQUFHLENBQThCO1FBQVksU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNqRixJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FDckMsSUFBSSxDQUFDLEVBQUU7WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDO1FBQzlDLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVNLElBQUksQ0FBQyxNQUFXO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWEsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFXO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsU0FBUyxDQUFDO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVMsR0FBRyxFQUFFLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU0sR0FBRyxDQUFDLEVBQVU7UUFDbkIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRSxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQU8sR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVNLFVBQVUsQ0FBQyxFQUFVO1FBQzFCLE1BQU0sR0FBRyxHQUFHLEdB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Y29yZSc7XG5pbXBvcnQgeyBXb3JsZHNraWxsc0FuZ3VsYXJMaWJTZXJ2aWNlIH0gZnJvbSAnLi4vd29ybGRza2lsbHMtYW5ndWxhci1saWIuc2VydmljZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUG9sbCB9IGZyb20gJy4vbW9kZWxzL3BvbGwnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnLi9tb2RlbHMvb3B0aW9uJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICcuL21vZGVscy9wYWdlJztcbmltcG9ydCB7IFJlc3VsdCB9IGZyb20gJy4vbW9kZWxzL3Jlc3VsdCc7XG5pbXBvcnQgeyBWb3RlIH0gZnJvbSAnLi9tb2RlbHMvdm90ZSc7XG5pbXBvcnQgeyBWb3RlRW50cnkgfSBmcm9tICcuL21vZGVscy92b3RlLWVudHJ5JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9sbFNlcnZpY2Uge1xuICBwdWJsaWMgZW5kcG9pbnQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgd3NpOiBXb3JsZHNraWxsc0FuZ3VsYXJMaWJTZXJ2aWNlLCBwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHRoaXMud3NpLnNlcnZpY2VDb25maWdTdWJqZWN0LnN1YnNjcmliZShcbiAgICAgIG5leHQgPT4ge1xuICAgICAgICB0aGlzLmVuZHBvaW50ID0gbmV4dC5hcGlFbmRwb2ludCArICcvdm90ZXMnO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgbGlzdChwYXJhbXM6IGFueSk6IE9ic2VydmFibGU8UGFnZTxQb2xsPj4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBhZ2U8UG9sbD4+KHRoaXMuZW5kcG9pbnQsIHtwYXJhbXN9KTtcbiAgfVxuXG4gIHB1YmxpYyBzZWxlY3QocGFyYW1zOiBhbnkpOiBPYnNlcnZhYmxlPFBvbGxbXT4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuZW5kcG9pbnR9L3NlbGVjdGA7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UG9sbFtdPih1cmwsIHtwYXJhbXN9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQoaWQ6IG51bWJlcik6IE9ic2VydmFibGU8UG9sbD4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuZW5kcG9pbnR9LyR7aWR9YDtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQb2xsPih1cmwpO1xuICB9XG5cbiAgcHVibGljIGdldFJlc3VsdHMoaWQ6IG51bWJlcik6IE9ic2VydmFibGU8UmVzdWx0W10+IHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50fS8ke2lkfS9yZXN1bHRzYDtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxSZXN1bHRbXT4odXJsKTtcbiAgfVxuXG4gIHB1YmxpYyBoYXNWb3RlZChpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxWb3RlPiB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5lbmRwb2ludH0vJHtpZH0vaGFzX3ZvdGVkYDtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxWb3RlPih1cmwpO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZShtb2RlbDogUG9sbCk6IE9ic2VydmFibGU8UG9sbD4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxQb2xsPih0aGlzLmVuZHBvaW50LCBtb2RlbCk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlKGlkOiBudW1iZXIsIG1vZGVsOiBQb2xsKTogT2JzZXJ2YWJsZTxQb2xsPiB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5lbmRwb2ludH0vJHtpZH1gO1xuICAgIHJldHVybiB0aGlzLmh0dHAucHV0PFBvbGw+KHVybCwgbW9kZWwpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZShpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50fS8ke2lkfWA7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUodXJsKTtcbiAgfVxuXG4gIHB1YmxpYyB1bmRlbGV0ZShpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50fS8ke2lkfS91bmRlbGV0ZWA7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQodXJsLCB7fSk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoaWQ6IG51bWJlciwgc3RhcnQ6IERhdGUsIGV4cGlyeTogRGF0ZSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgbW9kZWwgPSB7IHN0YXJ0LCBleHBpcnkgfTtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50fS8ke2lkfS9yZXNldGA7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQodXJsLCBtb2RlbCk7XG4gIH1cblxuICBwdWJsaWMgZXh0ZW5kKGlkOiBudW1iZXIsIGV4cGlyeTogRGF0ZSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgbW9kZWwgPSB7IGV4cGlyeSB9O1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuZW5kcG9pbnR9LyR7aWR9L2V4dGVuZGA7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQodXJsLCBtb2RlbCk7XG4gIH1cblxuICBwdWJsaWMgYWRkVm90ZShwb2xsSWQ6IG51bWJlciwgdm90ZXM6IFZvdGVFbnRyeSk6IE9ic2VydmFibGU8T3B0aW9uPiB7XG4gICAgY29uc3QgbW9kZWwgPSAgeyB2b3RlcyB9O1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuZW5kcG9pbnR9LyR7cG9sbElkfS9hZGRWb3RlYDtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8T3B0aW9uPih1cmwsIG1vZGVsKTtcbiAgfVxuXG4gIHB1YmxpYyB1bnZvdGUocG9sbElkOiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuZW5kcG9pbnR9LyR7cG9sbElkfS9yZW1vdmVWb3RlYDtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZSh1cmwpO1xuICB9XG59XG4iXX0=