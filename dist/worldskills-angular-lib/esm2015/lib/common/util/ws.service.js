"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WsService = exports.NO_SUBJECT = exports.LOADER_ONLY = exports.FULL = exports.isRequestOptions = exports.isFetchParams = exports.isMulticastOptions = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
function isMulticastOptions(object) {
    return object && ('subject' in object || 'loader' in object || 'subscription' in object || 'onError' in object);
}
exports.isMulticastOptions = isMulticastOptions;
// Fetch params can be empty and probably is most of the time, so hard to check this in a signature
function isFetchParams(object) {
    return object && ('limit' in object || 'offset' in object || 'sort' in object || 'l' in object);
}
exports.isFetchParams = isFetchParams;
function isRequestOptions(object) {
    return object && ('url' in object);
}
exports.isRequestOptions = isRequestOptions;
exports.FULL = {
    subject: true,
    loader: true,
    subscription: true
};
exports.LOADER_ONLY = {
    loader: true
};
exports.NO_SUBJECT = {
    loader: true,
    subscription: true
};
class WsService {
    constructor() {
        this.loaders = new rxjs_1.BehaviorSubject(0);
        this.subscription = null;
        this.subject = new rxjs_1.ReplaySubject(1);
        this.loading = new rxjs_1.ReplaySubject(1);
        this.loaders.subscribe(numLoaders => this.loading.next(numLoaders !== 0));
    }
    resolveArgs(p1, p2, p3, defaultMulticastOptions, defaultFetchParams) {
        let fetchParams;
        let multicastOptions;
        let requestOptions;
        if (isRequestOptions(p3)) {
            fetchParams = p1;
            multicastOptions = p2;
            requestOptions = p3;
        }
        else if (isRequestOptions(p2)) {
            requestOptions = p2;
            if (isMulticastOptions(p1)) {
                multicastOptions = p1;
            }
            else if (!isMulticastOptions(p1)) {
                fetchParams = p1;
            }
        }
        else if (isRequestOptions(p1)) {
            requestOptions = p1;
        }
        else {
            if (isMulticastOptions(p2) && !isMulticastOptions(p1)) {
                fetchParams = p1;
                multicastOptions = p2;
            }
            else {
                if (isMulticastOptions(p1)) {
                    multicastOptions = p1;
                }
                else if (!isMulticastOptions(p1)) {
                    fetchParams = p1;
                }
            }
        }
        if (fetchParams === undefined) {
            fetchParams = defaultFetchParams;
        }
        if (multicastOptions === undefined) {
            multicastOptions = defaultMulticastOptions;
        }
        if (requestOptions === undefined) {
            requestOptions = {};
        }
        return {
            fetchParams,
            multicastOptions,
            requestOptions
        };
    }
    incrementLoader() {
        this.loaders.pipe(operators_1.take(1)).subscribe(v => {
            this.loaders.next(++v);
        });
    }
    decrementLoader() {
        this.loaders.pipe(operators_1.take(1)).subscribe(v => {
            const loaders = Math.max(0, v - 1);
            this.loaders.next(loaders);
        });
    }
    multicast(observable, options = exports.FULL) {
        const { loader, subject, subscription, onError } = options;
        if (loader) {
            this.incrementLoader();
        }
        if (subscription && this.subscription) {
            if (loader && !this.subscription.closed) {
                this.decrementLoader();
                this.subscription.unsubscribe();
            }
        }
        const s = observable.subscribe(value => {
            if (loader) {
                this.decrementLoader();
            }
            if (subject) {
                this.subject.next(value);
            }
        }, error => {
            if (loader) {
                this.decrementLoader();
            }
            if (onError) {
                onError(error);
            }
        });
        if (subscription) {
            this.subscription = s;
        }
    }
    request(observable, options = exports.FULL) {
        this.multicast(observable, options);
        return observable;
    }
    requestMany(observables, options = exports.NO_SUBJECT) {
        const forkJoined = rxjs_1.forkJoin(observables);
        this.multicast(forkJoined, options);
        return forkJoined;
    }
}
exports.WsService = WsService;
//# sourceMappingURL=data:application/json;base64,